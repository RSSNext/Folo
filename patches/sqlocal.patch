diff --git a/dist/drivers/sqlite-opfs-driver.js b/dist/drivers/sqlite-opfs-driver.js
index 1981c64d31394f4a63876c935f72227c9c471d52..43cca7e59c2386dcc2b923e0a9c2ec78c4f669bd 100644
--- a/dist/drivers/sqlite-opfs-driver.js
+++ b/dist/drivers/sqlite-opfs-driver.js
@@ -10,6 +10,12 @@ export class SQLiteOpfsDriver extends SQLiteMemoryDriver {
             writable: true,
             value: 'opfs'
         });
+        Object.defineProperty(this, "poolUtil", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: null
+        });
     }
     async init(config) {
         const { databasePath } = config;
@@ -30,7 +36,8 @@ export class SQLiteOpfsDriver extends SQLiteMemoryDriver {
         if (this.db) {
             await this.destroy();
         }
-        this.db = new this.sqlite3.oo1.OpfsDb(databasePath, flags);
+        this.poolUtil = await this.sqlite3.installOpfsSAHPoolVfs({});
+        this.db = new this.poolUtil.OpfsSAHPoolDb(databasePath);
         this.config = config;
     }
     async isDatabasePersisted() {
@@ -50,16 +57,11 @@ export class SQLiteOpfsDriver extends SQLiteMemoryDriver {
         }
         let name, data;
         const path = parseDatabasePath(this.config.databasePath);
-        const { directories, getDirectoryHandle } = path;
         name = path.fileName;
-        const tempFileName = `backup-${Date.now()}--${name}`;
-        const tempFilePath = `${directories.join('/')}/${tempFileName}`;
-        this.db.exec({ sql: 'VACUUM INTO ?', bind: [tempFilePath] });
-        const dirHandle = await getDirectoryHandle();
-        const fileHandle = await dirHandle.getFileHandle(tempFileName);
-        const file = await fileHandle.getFile();
-        data = await file.arrayBuffer();
-        await dirHandle.removeEntry(tempFileName);
+        if (!this.poolUtil) {
+          throw new Error('OPFS pool utility not initialized');
+        }
+        data = (await this.poolUtil?.exportFile(this.config.databasePath)).buffer;
         return { name, data };
     }
     async clear() {
