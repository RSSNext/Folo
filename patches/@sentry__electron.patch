diff --git a/esm/main/ipc.js b/esm/main/ipc.js
index b5d4478b20cac94e1e1e54900d616286aa9f7733..3639b802c2f4012e943ed2f3d0454fbf5eeda3e3 100644
--- a/esm/main/ipc.js
+++ b/esm/main/ipc.js
@@ -134,14 +134,6 @@ function configureProtocol(client, options) {
     if (app.isReady()) {
         throw new Error("Sentry SDK should be initialized before the Electron app 'ready' event is fired");
     }
-    protocol.registerSchemesAsPrivileged([SENTRY_CUSTOM_SCHEME]);
-    // We Proxy this function so that later user calls to registerSchemesAsPrivileged don't overwrite our custom scheme
-    // eslint-disable-next-line @typescript-eslint/unbound-method
-    protocol.registerSchemesAsPrivileged = new Proxy(protocol.registerSchemesAsPrivileged, {
-        apply: (target, __, args) => {
-            target([...args[0], SENTRY_CUSTOM_SCHEME]);
-        },
-    });
     const rendererStatusChanged = createRendererAnrStatusHandler(client);
     app
         .whenReady()
diff --git a/main/ipc.js b/main/ipc.js
index 6866654fb79361ec90cc9b175a624d80c1e614b4..74494413854aba2acf777d641e356d0200b5a6d1 100644
--- a/main/ipc.js
+++ b/main/ipc.js
@@ -134,14 +134,6 @@ function configureProtocol(client, options) {
     if (electron.app.isReady()) {
         throw new Error("Sentry SDK should be initialized before the Electron app 'ready' event is fired");
     }
-    electron.protocol.registerSchemesAsPrivileged([SENTRY_CUSTOM_SCHEME]);
-    // We Proxy this function so that later user calls to registerSchemesAsPrivileged don't overwrite our custom scheme
-    // eslint-disable-next-line @typescript-eslint/unbound-method
-    electron.protocol.registerSchemesAsPrivileged = new Proxy(electron.protocol.registerSchemesAsPrivileged, {
-        apply: (target, __, args) => {
-            target([...args[0], SENTRY_CUSTOM_SCHEME]);
-        },
-    });
     const rendererStatusChanged = rendererAnr.createRendererAnrStatusHandler(client);
     electron.app
         .whenReady()
